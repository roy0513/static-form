// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "cockroachdb"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String     @id @default(cuid())
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    forms         Form[]     @relation("UserForms")
    responses     Response[] @relation("UserResponses")
}

model Form {
    id          String     @id @default(cuid())
    title       String
    description String?
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
    userId      String
    user        User       @relation("UserForms", fields: [userId], references: [id])
    responses   Response[]
}

model Question {
    id        String     @id @default(cuid())
    label     String
    type      String // This can be 'string', 'radio', 'checkbox', 'dropdown', 'datetime', etc.
    options   Json? // This can be used to store the options for 'radio', 'checkbox', 'dropdown' types
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    responses Response[]
}

model Response {
    id            Int      @id @default(sequence())
    formId        String
    form          Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
    questionId    String
    question      Question @relation(fields: [questionId], references: [id])
    userId        String
    user          User     @relation("UserResponses", fields: [userId], references: [id])
    responseValue Json // This can be used to store the response value. The structure can vary based on the question type.
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
